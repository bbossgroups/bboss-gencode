def profile = System.getProperty("profile") ?:  "dev"
def archType = System.getProperty("archType") ?:  "zip"

/**
apply plugin: 'docker'
//configuration
docker {
	baseImage 'frolvlad/alpine-oraclejdk8:slim'
	maintainer 'yin-bp yin-bp@163.com'
	registry 'https://192.168.137.132:8000'
	apiUsername 'foo'
	apiPassword 'foo123'
	apiEmail 'yin-bp@163.com'
}*/


sourceSets {
    main {
        java {
            srcDir 'src'
           
        }
       
    }
    test {
        java {
            srcDir 'test'
        }
         resources{
        	srcDir 'resources'
        }
    }
    
}

dependencies {
	api project(':gencode-core')
	api project(':gencode-web')
    api (
			[group: 'javax.xml.bind', name: 'jaxb-api', version: "2.3.0", transitive: false],
//
//			[group: 'com.sun.xml.bind', name: 'jaxb-impl', version: "2.3.0", transitive: false],
//
//			[group: 'com.sun.xml.bind', name: 'jaxb-core', version: "2.3.0", transitive: false],
//
//			[group: 'javax.activation', name: 'activation', version: "1.1.1", transitive: false],



               [group: 'com.bbossgroups', name: 'bboss-taglib', version: "${bboss_version}", transitive: false],
              [group: 'com.bbossgroups', name: 'bboss-htmlparser', version: "${bboss_version}", transitive: false],
             [group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.1', transitive: false],
            [group: 'commons-io', name: 'commons-io', version: '2.4', transitive: false],
               [group: 'jstl', name: 'jstl', version: '1.2', transitive: false],
            
    )
     api (
         fileTree(dir: '../lib/eclipse', include: '*.jar'),
         fileTree(dir: '../lib/jdbc', include: '**/*.jar'),
    	)
	api (
            [group: 'com.bbossgroups', name: 'bboss-tabpane', version: "${bboss_version}", transitive: false],
            [group: 'com.bbossgroups', name: 'bboss-bootstrap-rt', version: "${bboss_version}", transitive: true],
	)
    	
     compileOnly (
          
//            [group: 'javax.servlet', name: 'javax.servlet-api', version: "2.3.1", transitive: false],
            //[group: 'javax.servlet', name: 'jsp-api', version: '2.0', transitive: false],
            [group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.3.1', transitive: false],
            
//           [group: 'javax.el', name: 'javax.el-api', version: '2.2.1', transitive: false],
//           [group: 'org.eclipse.jetty.aggregate', name: 'jetty-all-server', version: '8.1.19.v20160209', transitive: false],
//           [group: 'org.eclipse.jetty.orbit', name: 'org.apache.jasper.glassfish', version: '2.2.2.v201112011158', transitive: false],
//           [group: 'org.eclipse.jetty.orbit', name: 'javax.servlet.jsp', version: '2.2.0.v201112011158', transitive: false],
//        
//          [group: 'org.eclipse.jetty.orbit', name: 'org.apache.taglibs.standard.glassfish', version: '1.2.0.v201112081803', transitive: false],
//           [group: 'org.eclipse.jetty.orbit', name: 'com.sun.el', version: '2.2.0.v201108011116', transitive: false],
             [group: 'org.eclipse.jetty', name: 'jetty-server', version: "${jetty_version}", transitive: true],
             [group: 'org.eclipse.jetty', name: 'jetty-webapp', version: "${jetty_version}", transitive: true],
             [group: 'org.eclipse.jetty', name: 'jetty-jmx', version: "${jetty_version}", transitive: true],
             [group: 'org.eclipse.jetty', name: 'jetty-servlets', version: "${jetty_version}", transitive: true],
             [group: 'org.eclipse.jetty.websocket', name: 'javax-websocket-server-impl', version: "${jetty_version}", transitive: true],
             [group: 'org.eclipse.jetty', name: 'apache-jstl', version: "${jetty_version}", transitive: true],
           
          
    )

    testImplementation (

//            [group: 'javax.servlet', name: 'javax.servlet-api', version: "2.3.1", transitive: false],
            //[group: 'javax.servlet', name: 'jsp-api', version: '2.0', transitive: false],
            [group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.3.1', transitive: false],

//            [group: 'javax.el', name: 'javax.el-api', version: '2.2.1', transitive: false],
            [group: 'org.eclipse.jetty', name: 'jetty-server', version: "${jetty_version}", transitive: true],
            [group: 'org.eclipse.jetty', name: 'jetty-webapp', version: "${jetty_version}", transitive: true],
            [group: 'org.eclipse.jetty', name: 'jetty-jmx', version: "${jetty_version}", transitive: true],
            [group: 'org.eclipse.jetty', name: 'jetty-servlets', version: "${jetty_version}", transitive: true],
            [group: 'org.eclipse.jetty.websocket', name: 'javax-websocket-server-impl', version: "${jetty_version}", transitive: true],
            [group: 'org.eclipse.jetty', name: 'apache-jstl', version: "${jetty_version}", transitive: true],
//            [group: 'org.eclipse.jetty.aggregate', name: 'jetty-all-server', version: '8.1.19.v20160209', transitive: false],
//            [group: 'org.eclipse.jetty.orbit', name: 'org.apache.jasper.glassfish', version: '2.2.2.v201112011158', transitive: false],
//            [group: 'org.eclipse.jetty.orbit', name: 'javax.servlet.jsp', version: '2.2.0.v201112011158', transitive: false],
//
//            [group: 'org.eclipse.jetty.orbit', name: 'org.apache.taglibs.standard.glassfish', version: '1.2.0.v201112081803', transitive: false],
//            [group: 'org.eclipse.jetty.orbit', name: 'com.sun.el', version: '2.2.0.v201108011116', transitive: false],


    )
    testImplementation (
 
            [group: 'org.eclipse.jetty', name: 'apache-jsp', version: "${jetty_version}", transitive: true],
            

    )
            {
                //org.eclipse.jdt:ecj:3.12.3
                exclude group: 'org.eclipse.jdt', module: 'ecj'
            }
    compileOnly (

            [group: 'org.eclipse.jetty', name: 'apache-jsp', version: "${jetty_version}", transitive: true],


    ){
        //org.eclipse.jdt:ecj:3.12.3
        exclude group: 'org.eclipse.jdt', module: 'ecj'
    }
     
}
task warcopyWebRootFiles(type: Copy){
	 from 'WebRoot'
	 into 'build/dist/WebRoot'
   
    if (profile.equals("product") && archType.equals("war")) {
        
        doLast {
            copy {
               
                // Copy the output of copyTask
                from(fileTree(dir: 'config/product/WEB-INF'))

                into 'build/dist/WebRoot/WEB-INF'
            }
        }
    }
}

task warcopyJarFiles(type: Copy,dependsOn:'warcopyWebRootFiles'){
	 from configurations.api{
		 canBeResolved=true

	 } +  configurations.runtimeOnly{
		 canBeResolved=true

	 }
	 into 'build/dist/WebRoot/WEB-INF/lib'
	 
}

//project.tasks.warcopyJarFiles.dependsOn(project(':gencode-web').tasks.publishToMavenLocal)
//project.tasks.compileJava.dependsOn(project(':gencode-web').tasks.publishToMavenLocal)
task warcopyResourceFiles(type: Copy,dependsOn:'warcopyJarFiles' ){
	 
	 from 'resources'   
	into 'build/dist/WebRoot/WEB-INF/classes'
    if (profile.equals("product")) {
        doLast {
            copy {
                // Copy the output of copyTask
                from(fileTree(dir: 'config/product/resources'))

                into 'build/dist/WebRoot/WEB-INF/classes'
            }
        }
    }
    else  if (profile.equals("test")) {
        doLast {
            copy {
                // Copy the output of copyTask
                from(fileTree(dir: 'config/test/resources'))

                into 'build/dist/WebRoot/WEB-INF/classes'
            }
        }
    }
	 
}


task copyJarFiles(type: Sync, dependsOn: 'jar') {
	from configurations.api{
		canBeResolved=true

	}+ configurations.compileOnly {
		canBeResolved=true
		exclude 'bboss-rt-**.jar'
	}
	from jar.outputs
	exclude { details -> details.file.name.startsWith('bboss-rt') }
	into 'build/dist/gencode/lib'

}

task copyRTJarFiles(type: Copy, dependsOn: 'copyJarFiles') {

	from configurations.api{
		canBeResolved=true

	}
	include { details -> details.file.name.startsWith('bboss-rt') }
	into 'build/dist/gencode'
	rename("bboss-rt-${bboss_version}.jar", "${project.name}-${bboss_version}.jar")
}
task copyToolFiles(type: Copy, dependsOn: 'copyRTJarFiles') {

	from("runfiles")
			{
				expand(
						bboss_version: "${bboss_version}",
						project: "${project.name}"

				)

			}
	filteringCharset = 'UTF-8'
	into 'build/dist/gencode'



}
//task copyLibFiles(type: Copy ){
////	from fileTree(dir: '../lib', include: '**/*.jar')
//	from configurations.api{
//		canBeResolved=true
//		exclude 'bboss-rt-**.jar'
//
//	} + configurations.compileOnly {
//		canBeResolved=true
//		exclude 'bboss-rt-**.jar'
//	}
//	into 'build/dist/gencode/lib'
//}
//project.tasks.copyLibFiles.dependsOn(project(':gencode-web').tasks.publishToMavenLocal)
task copyResourceFiles(type: Copy ){ 
	from fileTree(dir: 'resources')
	into 'build/dist/gencode/resources'
    if (profile.equals("product")) {
        doLast {
            copy {
                // Copy the output of copyTask
                from(fileTree(dir: 'config/product/resources'))

                into 'build/dist/gencode/resources'
            }
        }
    }
    else  if (profile.equals("test")) {
        doLast {
            copy {
                // Copy the output of copyTask
                from(fileTree(dir: 'config/test/resources'))

                into 'build/dist/gencode/resources'
            }
        }
    }
}

task copyWebrootFiles(type: Copy ){ 
	from fileTree(dir: 'WebRoot')
	into 'build/dist/gencode/WebRoot'
    
}
//task copyToolFiles(type: Copy ){
//
//	from ('runtime')
//	{
//		expand(bboss_version: "${PROJ_BBOSS_VERSION}",
//				project:"${project.name}",main_class:'org.frameworkset.gencode.web.service.JettyStart')
//
//	}
//    from (configurations.runtimeOnly  ){
//
//		include 'bboss-rt-**.jar'
//
//    }
//    //filteringCharset = 'UTF-8'
//	into 'build/dist/gencode'
//	rename ("bboss-rt-${bboss_version}.jar", "${project.name}-boot-${bboss_version}.jar")
//
//}
 
task releaseRuntimeZip(type: Zip,dependsOn:['clean','copyToolFiles','copyWebrootFiles','copyResourceFiles']) {
    //appendix = 'wrapper'
	archiveBaseName='gencode'
   from 'build/dist/gencode'
   
}

task releaseRuntimeWar(type: Zip,dependsOn:['clean','warcopyResourceFiles']) {
    //appendix = 'wrapper'
  // classifier = 'released'
	archiveExtension = 'war'
	archiveBaseName='gencode'
   from 'build/dist/WebRoot'
   
}

/**
task buildDocker(type: Docker,dependsOn: releaseRuntimeZip) {
	applicationName = jar.baseName
	tagVersion = jar.version
	dockerfile = file('Dockerfile')
	doFirst {
		println 'aaaa'
		println stageDir
		copy {
			from "build/dist"
			into stageDir
		}
	}
	doLast {
		delete stageDir
	}

}*/



