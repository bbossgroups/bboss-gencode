<a id="tree_node_bridge"></a><a id="tree_node_localbridge"></a>
#if($isStaticDynamic || $isStatic)
	<div id="bridge_$tree" style="display:none"></div>    
#end
<script language="javascript"> 
	  var tree_uuid = "$tree";
	  var tree_rootid = "$rootid";
	  var selectNode;
      function doClickTreeNode(linkUrl,selected,target,oldselected,eventLink,nodeid) 
      { 
      		var oelement = document.getElementsByName(oldselected);
           if(oldselected != 'null' && oelement )
           {
          	   
          	   if(oelement.length > 0)               
              		setNodeClassName(oelement[0],"unselectedTextAnchor");
           }
           var selement = document.getElementsByName(selectNode);
           if(selectNode != 'null' && selement && selement.length > 0)
           {
          
              
               setNodeClassName(selement[0],"unselectedTextAnchor");
           }
           selectNode = selected; 
        
         
          selement = document.getElementsByName(selectNode);
          
	      if(selement && selement.length > 0) 
	      {
	          
	          
	           setNodeClassName(selement[0],"selectedTextAnchor");
				}
	      //var tree_node_bridge = $("#tree_node_bridge");
	      var tree_node_bridge = document.getElementById("tree_node_bridge");
	      //alert(tree_node_bridge);
	      if(!target) target = ""
	      
	      
	      if(target.charAt(0) != '#')
	      {
	      	tree_node_bridge.href = linkUrl;
	      	tree_node_bridge.target = target;
	      	//tree_node_bridge.click();
	      	//target.location.href = linkUrl;
	      	//tree_node_bridge.onclick="location.href='"+linkUrl+"'";
	      	//tree_node_bridge.onclick();
		      //doclickevt(tree_node_bridge);
		      window.open(linkUrl,target);
		      //$(event.srcElement).attr({href:linkUrl,target:target}).removeAttr("onclick").click();
		      
		  }
		  else{
		  	 
  			 $(target).load(linkUrl);
			
		  }
		  
		  /**
		  var tree_node_bridge = $("#tree_node_bridge");
	      if(!target) target = ""
	      
	      
	      if(target.charAt(0) != '#')
	      {
	      
		      tree_node_bridge.attr("href",linkUrl); 
		      tree_node_bridge.attr("target",target); 
		      //alert("href:"+tree_node_bridge.attr("href"));
		      //alert("target:"+tree_node_bridge.attr("target"));
		      //tree_node_bridge.click();
		      //tree_node_bridge.trigger("click");
		      var temp = event.srcElement || event.target;
		      $(temp).attr({href:linkUrl,target:target}).removeAttr("onclick").click();
		  }
		  else{
		  	 
  			 $(target).load(linkUrl);
			
		  }
*/
 
	      if(eventLink)
	      { 
	      		doClickImageIcon(eventLink,nodeid);
	      } 
      } 
      
      function doClickImageIcon(linkUrl,eventNode)
      {

	      if(eventNode)
	      {
	      	eventNode = convertValue(eventNode,true);
	          var eventNode_ = $("#icon_" + eventNode);
	      	  if(eventNode_ == null)
	      	  	return ;
		      var firsted = eventNode_.attr("firsted"); 
		      if(firsted == "true")
		      {
		      		nodetoggle(eventNode,false); 
		      }
		      else 
		      { 
			      if(selectNode) 
			      {
			      	linkUrl += "&selectedNode=" + selectNode; 
			      }
			      
			      var indent = eventNode_.indent;
			      linkUrl += "&node_parent_indent=" + indent;
			      eventNode_.attr("firsted","true"); 
			      getSonOfNode(linkUrl,eventNode,false); 
		      } 
	      } 
	      else 
	      {
		      if(selectNode)
		      {
		      		linkUrl += "&selectedNode=" + selectNode; 
		      }
		      tree_node_localbridge.href=linkUrl;  
		      tree_node_localbridge.target=""; 
		      //tree_node_localbridge.click();
		      //doclickevt(tree_node_localbridge);
		      window.open(linkUrl,"_self");
	      }
      }
      
      
      function doClickImageIcon(linkUrl,eventNode,name,nodetype,nodepath,nodefirst,nodelast)
      {
     		
	      if(eventNode)
	      {
	      
	      	  eventNode = convertValue(eventNode,true);
	      	
	      		
	          var eventNode_ = $("#icon_" + eventNode);
	      
	      		
	      	  if(eventNode_.length <= 0)
	      	  	return ;
		      var firsted = eventNode_.attr("firsted"); 
		    
		      if(firsted == "true")
		      {
		      
		      		nodetoggle(eventNode,false); 
		      		
		      }
		      else 
		      { 
			      if(selectNode) 
			      {
			      	linkUrl += "&selectedNode=" + selectNode; 
			      }
			      
			      var indent = eventNode_.attr("indent");
			      
			      linkUrl += "&node_parent_indent=" + indent;
			      linkUrl += "&__nodename=" + name;
			      linkUrl += "&__nodetype=" + nodetype;
			      if(nodepath != null && nodepath != 'null' && nodepath != "")
			      {
			      	linkUrl += "&__nodepath=" + nodepath;
			      }
			       if(nodefirst != null && nodefirst != 'null' && nodefirst != "")
			      {
			      	linkUrl += "&__nodefirst=" + nodefirst;
			      }
			       if(nodelast != null && nodelast != 'null' && nodelast != "")
			      {
			      	linkUrl += "&__nodelast=" + nodelast;
			      }
			     // document.all.item("icon_" + eventNode).firsted = "true"; 
			      eventNode_.attr("firsted","true");
			      //alert(eventNode_.attr("firsted"));
			      getSonOfNode(linkUrl,eventNode,false); 
		      } 
	      } 
	      else 
	      {
		      if(selectNode)
		      {
		      		linkUrl += "&selectedNode=" + selectNode; 
		      }
		      tree_node_localbridge.href=linkUrl;  
		      tree_node_localbridge.target=""; 
		      //tree_node_localbridge.click();
		      //doclickevt(tree_node_localbridge);
		      window.open(linkUrl,"_self");
	      }
      }
      
      function convertValue(object,needconvert)
      {
      	
      	if(needconvert)
      	{
      	
	      	var ret = object.replace(/:/g,"\\:");
	      	ret = ret.replace(/\./g,"\\.");
	      	ret = ret.replace(/\//g,"\\/");
	      	ret = ret.replace(/\$/g,"\\$");
	      	ret = ret.replace(/\[/g,"\\[");
	      	ret = ret.replace(/\]/g,"\\]");
	      	ret = ret.replace(/#/g,"\\#");
	      	ret = ret.replace(/;/g,"\\;");
	      	ret = ret.replace(/&/g,"\\&");
	      	ret = ret.replace(/,/g,"\\,");
	      	ret = ret.replace(/\+/g,"\\+");
	      	ret = ret.replace(/\*/g,"\\*");
	      	ret = ret.replace(/~/g,"\\~");
	      	ret = ret.replace(/'/g,"\\'");
	      	//ret = ret.replace(/"/g,"\\"");
	      	ret = ret.replace(/!/g,"\\!");
	      	ret = ret.replace(/\^/g,"\\^");
	      	ret = ret.replace(/\(/g,"\\(");
	      	ret = ret.replace(/\)/g,"\\)");
	      	ret = ret.replace(/=/g,"\\=");
	      	ret = ret.replace(/>/g,"\\>");
	      	ret = ret.replace(/\|/g,"\\|");
	      	ret = ret.replace(/ /g,"\\ ");
		     return ret;
		    
		 }
		 else
		 {
		 	return object;
		 }
      }
      function nodetoggle(eventNode ,needconvert) 
      {
      	eventNode = convertValue(eventNode,needconvert);
      	
      	var node_ = $("#div_parent_" + eventNode);
      	
      	if(node_.length <= 0) return;
      	

      
      	var icon0 = $('img[name="icon0_'  + eventNode + '"]');
      	var icon1 = $('img[name="icon1_'  + eventNode + '"]');
      	if(node_.is(':visible')) //判断节点是否可见
      	{
      		icon0.attr("src",$("#icon_" + eventNode).attr("collapsedimg"));
		    icon1.attr("src",$("#icon_" + eventNode).attr("closedimg")); 
      	}
      	else
      	{
      		icon0.attr("src",$("#icon_" + eventNode).attr("expandedimg"));
      		icon1.attr("src",$("#icon_" + eventNode).attr("openedimg")); 
		  
      	}
      	node_.toggle();    
      	 // if(!$("#div_parent_" + eventNode)) return;//如果事件节点不存在，则直接返回
      	  
	      //if(Element.visible("div_parent_" + eventNode)) 
	      //{
		     // $("icon0_" + eventNode).src = $("icon_" + eventNode).collapsedimg;
		    //  $("icon1_" + eventNode).src = $("icon_" + eventNode).closedimg; 
	      //}
	      //else 
	      //{
		      //$("icon0_" + eventNode).src = $("icon_" + eventNode).expandedimg; 
		      //$("icon1_" + eventNode).src = $("icon_" + eventNode).openedimg; 
	      //}
	     // Element.toggle("div_parent_" + eventNode);    
      } 
      
      function getSonOfNode(linkUrl,eventNode,needconvert)
      {
      	var temp_uuid = convertValue(tree_uuid,true);
      	var bridge = $("#bridge_" + temp_uuid);
      	bridge.empty();
      	eventNode = convertValue(eventNode,needconvert);
      	var parentName = "#div_parent_" + eventNode;
      	var selector = " " + parentName + ",#sonsmenu__,#sonscript__";
      	
      	
      	bridge.load(linkUrl + selector,function(){      		
      		var javascriptstr = $("#sonscript__").html();
      		$("#sonscript__").remove();
      		var menustr = $("#sonsmenu__").html();
      		$("#sonsmenu__").remove();
      		var nodestr = bridge.html();
      		 bridge.empty();
      		 $("#div_" + eventNode).after(nodestr);
      		$("#div_" + eventNode).after(menustr);
   			eval(javascriptstr) ;
      		
			 nodetoggle(eventNode,false);
			 
			 var checkNode = $("#checkbox_" + eventNode);	
			
		      if(checkNode.length <= 0)
		           return;
		      var parentNode = $(parentName);     
		      
		      var sonids = parentNode.attr("sonids");		     
		      var recursive = checkNode.attr("recursive");
		      var uprecursive = checkNode.attr("uprecursive");
		      var partuprecursive = checkNode.attr("partuprecursive");
		      if((recursive && recursive == "true") || (partuprecursive  && partuprecursive == "true")
					|| (uprecursive && uprecursive == "true"))
		      {
		         checkNode.attr("sonids",sonids);
		         parentNode.attr("sonids","");
		         //checkSonCheckbox(checkNode,sonids);
		      }
      	})
      	
      	
      } 
      function setSon(father,sons,sonids,fatherids)
      {
      		
	      new Insertion.After("div_" + father,sons); 
	      nodetoggle(father,true); 
	      alert(father);
	      var checkNode = document.all.item("checkbox_" + father);
	      if(!checkNode)
	           return;
	      var recursive = checkNode.recursive;
	      var uprecursive = checkNode.uprecursive;
	      var partuprecursive = checkNode.partuprecursive;
	      if((recursive && recursive == "true") || (partuprecursive  && partuprecursive == "true")
				|| (uprecursive && uprecursive == "true"))
	      {
	         checkNode.sonids = sonids;
	         //alert("sonids:" +sonids);
	         //alert(checkNode.sonids);
	         //checkSonCheckbox(checkNode,sonids);
	      }
      }
      function treeNodeCheckboxChange(checkNode,event)
      {
      	
	      if(!checkNode)
	      {
	    	   
	           checkNode = event.srcElement || event.target;
	      }  
	   
	      var sonids = $(checkNode).attr("sonids");	       
	      var recursive = $(checkNode).attr("recursive");
	      
	      if(recursive && recursive == "true")
	      {
	      		checkSonCheckbox($(checkNode),sonids);
	      }
	      
	      var fatherids =  getFatherids(checkNode);
	      var uprecursive = $(checkNode).attr("uprecursive");
	      var partuprecursive =$(checkNode).attr("partuprecursive");
	     
	      if(partuprecursive == "true")
	      {
		      checkPartFatherCheckbox(checkNode,fatherids)
		  }
		  else
		  { 
		  	 if(uprecursive && uprecursive == "true")
		      	checkFatherCheckbox(checkNode,fatherids);
		  }
	      
      }
      function checkSonCheckbox(checkNode,sonids)
      {      	
	      if(sonids && sonids != "")
	      {
	         var sons = sonids.split("\#\#");
	         if(sons.length)
	         {  
	         
		        	for(var i = 0; i < sons.length; i ++)
		        	{
		        		var temp_son = convertValue(sons[i],true);
		        		var son = $("#checkbox_" + temp_son);		        		
		         		if(son.length > 0){
		         			if(checkNode.attr("checked") == son.attr("checked") )
		         			{
		         				continue;
		         				
		         					
		         			}
		         			if(son.attr("disabled"))
		         			{
		         				if(son.attr("checked"))
		         				{
		         					//son.checked = false;
		         					son.attr("checked",false)
		         				}
		         				else
		         				{
		         					continue;
		         				}
		         			}
		         			else
		         			{
		            			//son.checked = checkNode.checked;
		            			son.attr("checked",checkNode.attr("checked"));
		            		}
		            		checkSonCheckbox(son,son.attr("sonids"));
		      			}	
		        	}
	      	  }
	      	  else
	          {
	          		var temp_son = convertValue(sons,true);
	          		var son = $("#checkbox_" + temp_son);
		         	if(son.length > 0)
		         	{
		         		//if(checkNode.checked == son.checked)
		         		if(checkNode.attr("checked") == son.attr("checked") )
	         			{
	         				return;
	         			}
	         			//if(son.disabled)
	         			if(son.attr("disabled"))
	         			{
	         				//if(son.checked)
	         				//{
	         				//	son.checked = false;
	         				//}
	         				if(son.attr("checked"))
	         				{
	         					//son.checked = false;
	         					son.attr("checked",false)
	         				}
	         				
	         			}
	         			else
	         			{
	            			//son.checked = checkNode.checked;
	            			son.attr("checked",checkNode.attr("checked"));
	            		}		        		
		            	//checkSonCheckbox(son,son.sonids);
		            	checkSonCheckbox(son,son.attr("sonids"));
		      		 }
	          }
	       }
      }
      /**
      * 获取节点的所有父节点标识以\#\#分割
      */
      function getFatherids(checkNode)
      {
      		var id = checkNode.id;
      		
      		var prarents = $(checkNode).parents(" div");
      		
      		var size = prarents.size();
      		
      		var topdiv = "div_parent_" + tree_rootid;
      		
      		if(size <=0)
      		{
      			return "";
      		}
      		var fatherids = "";
      		
      		prarents.each(function (index, domEle) {
      			  
      			  var id = $(domEle).attr("id");
      			  var idx = id.indexOf("div_parent_");
      			  
      			  if(idx != -1)
      			  {
	      			  if(fatherids != "" )
	      			  {	
	      			  		fatherids += "\#\#" + id.substring("div_parent_".length);
	      			  }
	      			  else
	      			  {
	      			  		
	      			  		fatherids = id.substring("div_parent_".length);
	      			  		
	      			  }
	      		  }
      			  
      			  
      			  if(topdiv == id)
      			  	return false;
      			  
      		});
      		
      		return fatherids;
      		
      		
      }
      function checkFatherCheckbox(checkNode,fatherids)
      {      
      	var checked = $(checkNode).attr("checked");
       if(checked && fatherids && fatherids != "")
       {
         var fathers = fatherids.split("\#\#");
         if(fathers.length)
        	for(var i = 0; i < fathers.length ; i ++)
        	{
        		var temp_father = convertValue(fathers[i],true);
        		var father_ = $("#checkbox_" + temp_father);
         		if(father_.length > 0)
         		{
         			if(father_.attr("checked") == checked)
         			{
         				break;
         			}
            		father_.attr("checked",checked);
            	}
      
        	}
      	  else
         {
         		var temp_father = convertValue(fathers[i],true);
         		var father_ = $("#checkbox_" + temp_father);
         		if(father_.length > 0)
        			father_.attr("checked",checked);
     
         }
       }
      }

	function checkPartFatherCheckbox(checkNode,fatherids)
	{
		var checked = $(checkNode).attr("checked");
	 	if(fatherids && fatherids != "")
		{
	   		var fathers = fatherids.split("\#\#");
	        if(checked) //当前节点为选中状态
	        {
	         	if(fathers.length)
	         	{
	              	for(var i = 0; i < fathers.length ; i ++)
	                {
	                	var temp_father = convertValue(fathers[i],true);
	              		var father_ = $("#checkbox_" + temp_father);
	              		if(father_.length > 0)
	              		{
	              			if(father_.attr("checked")) return;
	              			//father_.checked = true;
	              			father_.attr("checked",true);
	              		}
	              
	              	}
	             }
	             else
	             {
	             	var temp_father = convertValue(fathers,true);
	             	var father_ = $("#checkbox_" + temp_father);
	             	
	             	if(father_.length > 0)
	              		father_.attr("checked",checked);
	             
	             }
	          }
	          else
	          {
	          	if(fathers.length)
	          	{
	          		var flag = false;
	          		for(var i = 0; i < fathers.length ; i ++)
	         		{
	         			var temp_father = convertValue(fathers[i],true);
	         			var father_ = $("#checkbox_" + temp_father);
	          			if(father_.length > 0)
	          			{
	          				if(father_.attr("checked") == false) return;
	     					var check = false;
	      					var sonids = father_.attr("sonids");
	      					var sons = sonids.split("\#\#");
	       					if(sons.length)
	       					{
	          					for( var j = 0; j < sons.length; j ++)
	          					{
	          						var temp_son = convertValue(sons[j],true);
	          						if($("#checkbox_" + temp_son).attr("checked"))
	          						{
	          							check = true;break;
	          						}		
	          								
	          					}
	          				}
			          		else
		              		{
		              			var temp_son = convertValue(sonids,true);
		              			if($("#checkbox_" + temp_son).attr("checked"))
		             			{check = true;}		
		             		}
	      					if(check) 
	      					{
	      						return;
	      					}
	      					else 
	      					{
	      						father_.attr("checked",false);
	      					}
	          			}
	          		}
	          	}
	            else
	            {
	            	var temp_father = convertValue(fathers,true);
	            	var father_ = $("#checkbox_" + temp_father);
	              	if(father_.length > 0)
	              	{
	          			if(father_.attr("checked") == false) return;
	         			var check = false;
	          			var sonids = father_.attr("sonids");
	          			var sons = sonids.split("\#\#");
	           			if(sons.length)
	           			{
	              			for( var j = 0; sons.length && j < sons.length; j ++)
	              			{
	              				var temp_son = convertValue(sons[j],true);
	              				if($("#checkbox_" + temp_son).attr("checked"))
	              				{check = true;break;}		
	              								
	              			}
	              		}
		          		else
	              		{
	              			var temp_son = convertValue(sonids,true);
	              			if($("#checkbox_" + temp_son).attr("checked"))
	              			{check = true;}		
	              		}
	  					if(check) return;
	  					else 
	  						father_.attr("checked",false);
	              	}
	             }
	        }  
	    }
	}
	
	 function doclickevt(clicknode)
	  {
	  	if(document.all)     
	  	 {
          clicknode.click();    
            
	    }        
	     else
	    {
	      var evt = document.createEvent("MouseEvents");
	      
	       evt.initEvent("click",true,true);
	      
	       clicknode.dispatchEvent(evt);
	     }   
	  }
	  
	  
	  function setNodeClassName(element,newclassname)
	  {
	 
	  	if(document.all)     
	  	 {
          element.setAttribute("className", newclassname);    
          
	    }        
	     else
	    {
	      	element.setAttribute("class", newclassname);
     			
	     }   
	  }
	  
	  
</script>          
              		
      